// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: ptypes.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RickyService_SubmitTestimonial_FullMethodName = "/RickyService/SubmitTestimonial"
)

// RickyServiceClient is the client API for RickyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RickyServiceClient interface {
	SubmitTestimonial(ctx context.Context, in *TestimonialSubmission, opts ...grpc.CallOption) (*GenericReply, error)
}

type rickyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRickyServiceClient(cc grpc.ClientConnInterface) RickyServiceClient {
	return &rickyServiceClient{cc}
}

func (c *rickyServiceClient) SubmitTestimonial(ctx context.Context, in *TestimonialSubmission, opts ...grpc.CallOption) (*GenericReply, error) {
	out := new(GenericReply)
	err := c.cc.Invoke(ctx, RickyService_SubmitTestimonial_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RickyServiceServer is the server API for RickyService service.
// All implementations must embed UnimplementedRickyServiceServer
// for forward compatibility
type RickyServiceServer interface {
	SubmitTestimonial(context.Context, *TestimonialSubmission) (*GenericReply, error)
	mustEmbedUnimplementedRickyServiceServer()
}

// UnimplementedRickyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRickyServiceServer struct {
}

func (UnimplementedRickyServiceServer) SubmitTestimonial(context.Context, *TestimonialSubmission) (*GenericReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTestimonial not implemented")
}
func (UnimplementedRickyServiceServer) mustEmbedUnimplementedRickyServiceServer() {}

// UnsafeRickyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RickyServiceServer will
// result in compilation errors.
type UnsafeRickyServiceServer interface {
	mustEmbedUnimplementedRickyServiceServer()
}

func RegisterRickyServiceServer(s grpc.ServiceRegistrar, srv RickyServiceServer) {
	s.RegisterService(&RickyService_ServiceDesc, srv)
}

func _RickyService_SubmitTestimonial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestimonialSubmission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RickyServiceServer).SubmitTestimonial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RickyService_SubmitTestimonial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RickyServiceServer).SubmitTestimonial(ctx, req.(*TestimonialSubmission))
	}
	return interceptor(ctx, in, info, handler)
}

// RickyService_ServiceDesc is the grpc.ServiceDesc for RickyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RickyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RickyService",
	HandlerType: (*RickyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTestimonial",
			Handler:    _RickyService_SubmitTestimonial_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ptypes.proto",
}
